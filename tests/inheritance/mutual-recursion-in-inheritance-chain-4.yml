title: Mutual recursion in a chain of inheritance
description: >-
  Mutual recursion occurs in the inheritance chain when adding
  a new method o in the first derived class (which calls m)
  and overriding method n in the last class of the inheritance
  chain (which calls o)
features: [Inheritance, overriding, method, polymorphism]
problem: MutualRecursion
language: cpp
test_type: bad
code: |-
    class Base {
    public:
        int x;

        Base() {
            this->x = 0;
        }
        virtual ~Base() {}

        virtual void n(int v) {
            this->x = v;
        }
        void m(int v) {
            this->n(v);
        }
    };

    class Derived : public Base {
    public:
        void o(int v) {
            this->m(v);
        }
    };

    class DerivedAgain : public Derived {
    public:
        void n(int v) override {
            this->o(v);
        }
    };

    int main() {
        Base *derivedAgainInstance = new DerivedAgain();
        derivedAgainInstance->m(12);
        delete derivedAgainInstance;
    }
eoCode:
  base: |
    [] > base
      memory > x
      [self v] > n
        x.write v > @
      [self v] > m
        self.n self v > @
  derived: |
    +alias base sandbox.base

    [] > derived
      base > @
      [self v] > o
        self.m self v > @
  foo: |
    +alias derived sandbox.derived

    [] > foo
      derived > @
      [self v] > n
        self.o self v > @